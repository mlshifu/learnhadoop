import re
import subprocess
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

def extract_threads_from_logs(hostname, ssh_username, ssh_password):
    # Adjust the log file path based on your environment on the remote machine
    log_file_path = f"/path/to/your/hiveserver2/logs/{hostname}-hiveserver2.log"

    # Execute an SSH command to extract thread information from logs
    command = f"sshpass -p {ssh_password} ssh {ssh_username}@{hostname} 'grep -E \"Thread:|Duration:\" {log_file_path} | awk \"{{print $4, $8}}\" | awk \"$2 > 60000\"'"
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, error = process.communicate()

    if process.returncode == 0:
        return output.decode('utf-8')
    else:
        print(f"Error extracting threads from {hostname} logs:", error.decode('utf-8'))
        return None

def send_email(thread_info_combined):
    # Email configuration
    smtp_server = "your_smtp_server"
    smtp_port = 587
    smtp_username = "your_email@example.com"
    smtp_password = "your_email_password"
    recipient_email = "recipient@example.com"

    # Create a MIME object to represent the email
    message = MIMEMultipart()
    message["From"] = smtp_username
    message["To"] = recipient_email
    message["Subject"] = "HiveServer2 Threads Report"
    message.attach(MIMEText(thread_info_combined, "plain"))

    # Connect to the SMTP server and send the email
    with smtplib.SMTP(smtp_server, smtp_port) as server:
        server.starttls()
        server.login(smtp_username, smtp_password)
        server.sendmail(smtp_username, recipient_email, message.as_string())

    print("Email sent successfully!")

# Example usage
hs2_servers = [
    {"hostname": "hs2_server1", "ssh_username": "your_ssh_username", "ssh_password": "your_ssh_password"},
    {"hostname": "hs2_server2", "ssh_username": "your_ssh_username", "ssh_password": "your_ssh_password"},
    # Add more servers with SSH credentials
]

thread_info_combined = ""

for hs2_server_info in hs2_servers:
    thread_info = extract_threads_from_logs(
        hs2_server_info["hostname"],
        hs2_server_info["ssh_username"],
        hs2_server_info["ssh_password"]
    )

    if thread_info is not None:
        thread_info_combined += f"\n\nThread information for {hs2_server_info['hostname']}:\n{thread_info}"

# Send an email with the combined thread information
if thread_info_combined:
    send_email(thread_info_combined)
else:
    print("No thread information to send.")

#!/bin/bash

# Get current timestamp
timestamp=$(date +"%Y%m%d%H%M%S")

# Log file with timestamp
log_file="transfer_log_${timestamp}.txt"

# Clear log file
> "$log_file"

# Define source files and target directory on Server B
source_file_list="source_file_list.txt"
target_dir="/path/to/target/directory"

# Define SSH connection details for Server B
userB="userB"
serverB="serverB.example.com"

# Maximum parallelism (change this value to 50)
max_parallelism=50

# Counter for active background processes
active_processes=0

# Function to perform SFTP transfer and log information
perform_sftp_transfer() {
    local source_file="$1"
    local target_dir="$2"
    local userB="$3"
    local serverB="$4"

    # Log start time
    start_time=$(date +"%Y-%m-%d %H:%M:%S")
    echo "Start time: $start_time" >> "$log_file"

    # SFTP transfer from Server A to Server B
    echo "Transferring file $source_file to $serverB..." >> "$log_file"
    sftp_output=$(sftp -o "BatchMode yes" -b - "$userB@$serverB" 2>&1 <<EOF >> "$log_file"
put "$source_file" "$target_dir"
exit
EOF
    )

    # Log sftp output
    echo "$sftp_output" >> "$log_file"

    # Check the exit status of the sftp command
    if [ $? -eq 0 ] && ! grep -q "File transfer failed" "$log_file"; then
        # Log end time for successful transfer
        end_time=$(date +"%Y-%m-%d %H:%M:%S")
        echo "End time: $end_time" >> "$log_file"

        # Log file size
        file_size=$(du -sh "$source_file" | cut -f1)
        echo "File size: $file_size" >> "$log_file"

        # Calculate and log transfer time
        start_timestamp=$(date -d "$start_time" +"%s")
        end_timestamp=$(date -d "$end_time" +"%s")
        transfer_time=$((end_timestamp - start_timestamp))
        echo "Transfer time: $transfer_time seconds" >> "$log_file"

        echo "File transfer of $source_file successful." >> "$log_file"
    else
        # Log status message for failed transfer
        echo "File transfer of $source_file failed." >> "$log_file"
    fi

    # Decrement active process counter after transfer completes
    active_processes=$((active_processes - 1))
}

# Loop through each source file from the list and initiate SFTP transfer
while IFS= read -r source_file; do
    # Check if maximum parallelism reached
    if [ "$active_processes" -ge "$max_parallelism" ]; then
        # Wait for some background processes to finish
        wait -n
    fi

    # Perform SFTP transfer in the background
    perform_sftp_transfer "$source_file" "$target_dir" "$userB" "$serverB" &
    # Increment active process counter
    active_processes=$((active_processes + 1))
done < "$source_file_list"

# Wait for remaining background processes to finish
wait

echo "All file transfers complete. Log saved to $log_file."
